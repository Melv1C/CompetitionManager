import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { authClient } from '@/lib/auth-client';
import { zodResolver } from '@hookform/resolvers/zod';
import { useCallback, useMemo, useState } from 'react';
import { useForm } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { toast } from 'sonner';
import { z } from 'zod';

interface CreateOrganizationDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

// Define form schema with Zod
const createFormSchema = (t: (key: string) => string) =>
  z.object({
    name: z.string().min(1, t('nameRequired')),
    slug: z
      .string()
      .regex(/^[a-z0-9-]*$/, t('slugInvalidFormat'))
      .optional(),
    logo: z.string().url(t('logoInvalidUrl')).optional().or(z.literal('')),
  });

type FormData = z.infer<ReturnType<typeof createFormSchema>>;

export function CreateOrganizationDialog({
  open,
  onOpenChange,
}: CreateOrganizationDialogProps) {
  const { t } = useTranslation('organization');

  // Create schema with translations
  const formSchema = useMemo(() => createFormSchema(t), [t]);

  // Initialize form with react-hook-form and Zod
  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: '',
      slug: '',
      logo: '',
    },
  });

  const { watch, setValue } = form;
  const nameValue = watch('name');
  const slugValue = watch('slug');

  // Generate slug from name when needed
  const generateSlug = useCallback((name: string) => {
    return name
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
  }, []);

  // Auto-generated slug for display
  const autoSlug = useMemo(() => {
    return slugValue || generateSlug(nameValue);
  }, [nameValue, slugValue, generateSlug]);

  // Toggle between auto-generated and custom slug
  const [isCustomSlug, setIsCustomSlug] = useState(false);

  const handleSlugEdit = () => {
    if (!isCustomSlug) {
      setValue('slug', autoSlug);
    }
    setIsCustomSlug(!isCustomSlug);
  };

  const handleSlugChange = (value: string) => {
    setValue('slug', value.toLowerCase());
  };
  const onSubmit = async (data: FormData) => {
    try {
      // Use auto-generated slug if no custom slug is set
      const finalSlug = data.slug || generateSlug(data.name);

      // Check if the slug is available
      const slugCheck = await authClient.organization.checkSlug({
        slug: finalSlug,
      });

      if (slugCheck.error) {
        form.setError('slug', {
          type: 'manual',
          message: t('slugTaken'),
        });
        return;
      }

      await authClient.organization.create({
        name: data.name,
        slug: finalSlug,
        logo: data.logo || undefined,
      });

      toast.success(t('createSuccess'));
      onOpenChange(false);
      form.reset();
      setIsCustomSlug(false);
    } catch (error) {
      console.error('Failed to create organization:', error);
      toast.error(t('createError'));
    }
  };
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>{t('createOrganization')}</DialogTitle>
          <DialogDescription>{t('createDescription')}</DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t('organizationName')}</FormLabel>
                  <FormControl>
                    <Input placeholder={t('namePlaceholder')} {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="slug"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="flex items-center justify-between">
                    {t('organizationSlug')}
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      onClick={handleSlugEdit}
                      className="h-auto p-1 text-xs"
                    >
                      {isCustomSlug ? t('useAutoGenerated') : t('customize')}
                    </Button>
                  </FormLabel>
                  <FormControl>
                    {isCustomSlug ? (
                      <Input
                        placeholder={t('slugPlaceholder')}
                        value={field.value}
                        onChange={(e) => handleSlugChange(e.target.value)}
                      />
                    ) : (
                      <Input
                        placeholder={t('slugPlaceholder')}
                        value={autoSlug}
                        readOnly
                        className="bg-muted"
                      />
                    )}
                  </FormControl>
                  <FormDescription>{t('slugDescription')}</FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="logo"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t('organizationLogo')}</FormLabel>
                  <FormControl>
                    <Input
                      type="url"
                      placeholder={t('logoPlaceholder')}
                      {...field}
                    />
                  </FormControl>
                  <FormDescription>{t('logoDescription')}</FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />
            <DialogFooter>
              {form.formState.errors.root && (
                <div className="text-sm text-destructive">
                  {form.formState.errors.root.message}
                </div>
              )}
              <Button
                type="button"
                variant="outline"
                onClick={() => onOpenChange(false)}
              >
                {t('cancel')}
              </Button>
              <Button type="submit">{t('create')}</Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
